{"version":3,"sources":["../src/index.js"],"names":["keyvApiTests","test","Keyv","store","serial","t","keyv","true","set","Promise","is","get","undefined","delete"],"mappings":"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","file":"index.js","sourcesContent":["import delay from 'delay';\n\nconst keyvApiTests = (test, Keyv, store) => {\n\ttest.serial('.set(key, value) returns a Promise', t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.true(keyv.set('foo', 'bar') instanceof Promise);\n\t});\n\n\ttest.serial('.set(key, value) resolves to value', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.is(await keyv.set('foo', 'bar'), 'bar');\n\t});\n\n\ttest.serial('.set(key, value, ttl) sets a value that expires', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.is(await keyv.set('foo', 'bar', 100), 'bar');\n\t\tt.is(await keyv.get('foo'), 'bar');\n\t\tawait delay(100);\n\t\tt.is(await keyv.get('foo'), undefined);\n\t});\n\n\ttest.serial('.get(key) returns a Promise', t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.true(keyv.get('foo') instanceof Promise);\n\t});\n\n\ttest.serial('.get(key) resolves to value', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tawait keyv.set('foo', 'bar');\n\t\tt.is(await keyv.get('foo'), 'bar');\n\t});\n\n\ttest.serial('.get(key) with nonexistent key resolves to undefined', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tawait keyv.delete('foo');\n\t\tt.is(await keyv.get('foo'), undefined);\n\t});\n\n\ttest.serial('.get(key) with falsey key resolves to value', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tawait keyv.set('foo', false);\n\t\tt.is(await keyv.get('foo'), false);\n\t});\n\n\ttest.serial('.delete(key) returns a Promise', t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.true(keyv.delete('foo') instanceof Promise);\n\t});\n\n\ttest.serial('.delete(key) resolves to true', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tawait keyv.set('foo', 'bar');\n\t\tt.is(await keyv.delete('foo'), true);\n\t});\n\n\ttest.serial('.delete(key) with nonexistent key resolves to false', async t => {\n\t\tconst keyv = new Keyv({ store });\n\t\tt.is(await keyv.delete('foo'), false);\n\t});\n};\n\nexport default keyvApiTests;\n"]}